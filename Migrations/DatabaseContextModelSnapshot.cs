// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Models;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.Permission", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("WebApi.Models.PermissionHasRoute", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PermissionName")
                        .HasColumnType("text");

                    b.Property<string>("RouteName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName");

                    b.HasIndex("RouteName");

                    b.ToTable("PermissionHasRoute");
                });

            modelBuilder.Entity("WebApi.Models.RefreshToken", b =>
                {
                    b.Property<Guid?>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WebApi.Models.RoleHasPermission", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PermissionName")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName");

                    b.HasIndex("RoleName");

                    b.ToTable("RoleHasPermission");
                });

            modelBuilder.Entity("WebApi.Models.RoleMaster", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("RoleMasters");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("018f5cbe-e037-73c2-8f35-27c9e4a6b8e5"),
                            RoleName = "Superadmin"
                        },
                        new
                        {
                            RoleId = new Guid("503dac6f-1c23-496c-a4cd-cc7c7f61dee0"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("WebApi.Models.RouteMaster", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Flag")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Flag");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RouteMaster");
                });

            modelBuilder.Entity("WebApi.Models.UserMaster", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PasswordReset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhotoFilename")
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("RememberToken")
                        .HasColumnType("text");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserMasters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("018f5cbe-69d4-78d8-96de-c2deb08e419d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 7, 22, 15, 22, 327, DateTimeKind.Unspecified).AddTicks(3236), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "superadmin@example.com",
                            EmailVerifiedAt = new DateTimeOffset(new DateTime(2024, 11, 7, 22, 15, 22, 87, DateTimeKind.Unspecified).AddTicks(1528), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "superadmin",
                            Password = "$2b$10$i5IbGQtfkx5sTDrRNZ2IbexSS4DVN.nmKJcpmH3RIqACAENLjsVQS",
                            UpdateAt = new DateTimeOffset(new DateTime(2024, 11, 7, 22, 15, 22, 327, DateTimeKind.Unspecified).AddTicks(3294), new TimeSpan(0, 7, 0, 0, 0)),
                            Username = "superadmin"
                        });
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("018f5cbf-7db3-7080-8a39-fb1c17574446"),
                            RoleId = new Guid("018f5cbe-e037-73c2-8f35-27c9e4a6b8e5"),
                            UserId = new Guid("018f5cbe-69d4-78d8-96de-c2deb08e419d")
                        });
                });

            modelBuilder.Entity("WebApi.Models.PermissionHasRoute", b =>
                {
                    b.HasOne("WebApi.Models.Permission", "Permission")
                        .WithMany("Routes")
                        .HasForeignKey("PermissionName")
                        .HasPrincipalKey("Name");

                    b.HasOne("WebApi.Models.RouteMaster", "Route")
                        .WithMany("Permissions")
                        .HasForeignKey("RouteName")
                        .HasPrincipalKey("Name");

                    b.Navigation("Permission");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("WebApi.Models.RoleHasPermission", b =>
                {
                    b.HasOne("WebApi.Models.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionName")
                        .HasPrincipalKey("Name");

                    b.HasOne("WebApi.Models.RoleMaster", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleName")
                        .HasPrincipalKey("RoleName");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.HasOne("WebApi.Models.RoleMaster", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("WebApi.Models.UserMaster", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Permission", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("WebApi.Models.RoleMaster", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebApi.Models.RouteMaster", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WebApi.Models.UserMaster", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
